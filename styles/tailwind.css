@tailwind base;
@tailwind components;
@tailwind utilities;

/* kbd */

kbd {
  @apply text-white bg-gray-900 rounded-md border-2 border-b-4 border-gray-700 text-sm font-bold px-2 whitespace-nowrap shadow-md;
}

/* Theme Switch */

.theme-transition * {
  @apply transition duration-500 ease-in-out;
}

.theme-toggle {
  cursor: pointer;
  position: relative;
  border-radius: 5px;
  width: 40px;
  height: 25px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  outline: none;
  background: none;
  padding: 0;
  appearance: none;
}

.theme-toggle input {
  display: none;
}

.theme-toggle input + div {
  position: relative;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  border: none;
  background-color: transparent;
  transform: scale(1);
  transition: all 0.45s ease;
  overflow: hidden;
  box-shadow: inset 8px -8px 0px 0px #718096;
}

.theme-toggle input:checked + div {
  border: 4px solid #cbd5e0;
  background-color: #cbd5e0;
  transform: scale(0.55);
  transition: all 0.45s ease;
  overflow: visible;
  box-shadow: none;
}

.theme-toggle input + div:before {
  content: '';
  position: absolute;
  right: -9px;
  top: -9px;
  height: 24px;
  width: 24px;
  border-radius: 50%;
  transition: transform 0.45s ease;
  border: none;
  transform: translate(0, 0);
  opacity: 1;
}

.theme-toggle input:checked + div:before {
  border: 2px solid #cbd5e0;
  transform: translate(14px, -14px);
  opacity: 0;
}

.theme-toggle input + div:after {
  content: '';
  width: 8px;
  height: 8px;
  border-radius: 50%;
  margin: -4px 0 0 -4px;
  position: absolute;
  top: 50%;
  left: 50%;
  box-shadow: 0 -23px 0 #cbd5e0, 0 23px 0 #cbd5e0, 23px 0 0 #cbd5e0, -23px 0 0 #cbd5e0, 15px 15px 0 #cbd5e0,
    -15px 15px 0 #cbd5e0, 15px -15px 0 #cbd5e0, -15px -15px 0 #cbd5e0;
  transform: scale(0);
  transition: all 0.35s ease;
}

.theme-toggle input:checked + div:after {
  transform: scale(1);
}

/* PRISM CODE */

.prism-code {
  border-radius: 0 !important;
}

.code-block {
  @apply relative overflow-auto;
}

.code-block pre[class*='language-'] {
  @apply pt-8;
}

.code-block pre[class*='language-']:before {
  @apply bg-white rounded-b text-black py-1 px-2 absolute text-right uppercase top-0 text-xs;
  left: 1rem;
}

.code-block pre[class~='language-js']:before {
  @apply text-black;
  content: 'js';
  background: #f7df1e;
}

.code-block pre[class~='language-jsx']:before {
  @apply text-black;
  content: 'jsx';
  background: #61dafb;
}

.code-block pre[class~='language-ts']:before {
  @apply text-black;
  content: 'ts';
  background: #61dafb;
}

.code-block pre[class~='language-tsx']:before {
  @apply text-black;
  content: 'tsx';
  background: #61dafb;
}

.code-block pre[class~='language-html']:before {
  @apply text-white;
  content: 'html';
  background: #005a9c;
}

.code-block pre[class~='language-xml']:before {
  @apply text-white;
  content: 'xml';
  background: #005a9c;
}

.code-block pre[class~='language-svg']:before {
  @apply text-white;
  content: 'svg';
  background: #005a9c;
}

.code-block pre[class~='language-graphql']:before {
  content: 'GraphQL';
  background: #e10098;
}

.code-block pre[class~='language-css']:before {
  @apply text-black;
  content: 'css';
  background: #ff9800;
}

.code-block pre[class~='language-mdx']:before {
  @apply text-black;
  content: 'mdx';
  background: #f9ac00;
}

.code-block pre[class~='language-php']:before {
  @apply text-white;
  content: 'php';
  background: #8892bf;
}

.code-block pre[class~='language-text']:before {
  content: 'text';
}

.code-block pre[class~='language-shell']:before {
  content: 'shell';
}

.code-block pre[class~='language-sh']:before {
  content: 'sh';
}

.code-block pre[class~='language-bash']:before {
  content: 'bash';
}

.code-block pre[class~='language-yaml']:before {
  content: 'yaml';
  background: #ffa8df;
}

.code-block pre[class~='language-yml']:before {
  content: 'yml';
  background: #ffa8df;
}

.code-block pre[class~='language-markdown']:before {
  content: 'md';
}

.code-block pre[class~='language-json']:before,
.code-block pre[class~='language-json5']:before {
  content: 'json';
  background: 'linen';
}

/* LOADING BUTTON */

[data-loading-button] {
  /* make it a grid so we can stack the child states */
  display: inline-grid;
  grid-template: 1fr / 1fr;
  transition: all 100ms ease-in-out;
}

[data-loading-button] > * {
  /* stack all states on top of each other */
  grid-area: 1/1;

  /* I don't know why it has to be a grid itself,
     but the animation stops working if it's not */
  display: grid;

  /* lovely vertical/horizontal centering */
  align-items: center;
  justify-content: center;

  /* make sure content gets centered vertically */
  height: 100%;

  /* the top level animation between states */
  transition: opacity 300ms ease-in-out;

  /* for icons absolute position inside right padding */
  position: relative;
  padding-left: 2rem;
  padding-right: 2rem;
}

/* hide when hidden, ofc */
[data-loading-button] > [hidden] {
  opacity: 0;
  transition-delay: 0ms;
}

/* this creates the sliding effect */
[data-lb-slider] {
  /* start from the right */
  transform: translateX(50%);
  transition: transform 300ms ease-in-out;
  transition-delay: 0ms;
}

/* slide to the center when entering */
[data-lb-direction='enter'] [data-lb-slider] {
  transform: translateX(0%);
}

/* slide to the left when exiting */
[data-lb-direction='exit'] [data-lb-slider] {
  transform: translateX(-50%);
}

/* put the icon inside the right padding so text stays
   horizontally centered (looks better on big buttons)
   and for smaller buttons you can add 2rem of padding
   to the right of the text if it feels off balance */
[data-lb-icon] {
  position: absolute;
  top: 0;
  right: 0;
  height: 100%;
  display: grid;
  justify-content: center;
  align-items: center;
}

[data-spin] {
  animation: spin 1.5s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
